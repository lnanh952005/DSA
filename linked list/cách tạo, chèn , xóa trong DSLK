#include <bits/stdc++.h>
using namespace std;
struct node{
	int data;
	node *next;	
};
node* makenode(int x){
	node *tmp = new node();
	tmp->data = x;
	tmp->next = NULL;
	return tmp;
}
int size(node *head){
	int cnt=0;
	while(head!=NULL){
		cnt++;
		head = head->next;
	}
	return cnt;
}
void duyet(node *head){
	while(head!=NULL){
		cout << head->data<< " ";
		head = head->next;
	}
}
//--------------------------------------------------------------------
void pushfront(node **head,int x){
	node *newnode = makenode(x);
	newnode -> next = *head; //gan dia chi cua node moi thanh node dau
	*head = newnode;
}
void pushback(node **head,int x){
	node *newnode = makenode(x);
	node *tmp = *head;
	if(*head==NULL){
		*head = newnode;
		return;
	}
	while(tmp->next!=NULL){
		tmp = tmp->next;
	}
	//tmp : node cuoi cung
	tmp->next = newnode;
}
void insert(node **head,int k,int x){
	node * newnode = makenode(x);
	int n = size(*head);
	if(k<1 || k > n+1) return ;
	if(k==1){
		pushfront(head,x);
		return;
	}
	node *tmp = *head;
	for(int i=1;i<=k-2;k++){
		tmp = tmp->next;
	}
	//tmp :k-1
	newnode->next = tmp->next; //k
	tmp->next=newnode;
}
//---------------------------------------------------------------------------------------------------------
void popfront(node **head){
	node *temp= *head;
	if(*head==NULL) return ;
	(*head) = (*head)->next;
	free(temp);
}
void popback(node **head){
	node *temp = *head;
	if(*head==NULL) return;
	if(temp->next==NULL){//neu co 1 node
		*head=NULL;
		free(temp);
		return ;
	}
	while(temp->next->next!=NULL){
		temp = temp->next;
	}
	// tmp : node gan node cuoi cung
	node *last = temp->next;
	temp->next = NULL;
	free(last);
}
void erase(node **head,int k){
	int n = size(*head);
	if(k<1 || k>n) return ;
	if(k==1){
		popfront(head);
		return;
	}
	node *temp = *head;
	for(int i=1;i<=k-2;i++){
		temp=temp->next;
	}
	//temp : k-1
	node *xoa = temp->next; // k
	temp->next = xoa->next;
	free(xoa);
}
int main(){
	node* head;
	head= NULL;
	int n ,k;
	cin >>n >> k;
	for(int i=1;i<=n;i++){
		int x; cin >> x;
		pushback(&head,x);
	}
	duyet(head);
}
