#include <bits/stdc++.h>
using namespace std;
int a[1001][1001];
int dx[] = {-1,0,0,1};
int dy[] = {0,-1,1,0};
int n,m;
void nhap(){
	cin >> n >> m;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			cin >> a[i][j];
		}
	}
}
void Dijkstra(){
	int d[n+1][m+1];
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			d[i][j] = 1e9;
		}
	}
	d[1][1] = a[1][1];
	priority_queue <pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
	pq.push({a[1][1],{1,1}});
	while(pq.size()){
		auto top = pq.top(); pq.pop();
		int i = top.second.first, j = top.second.second, kc = top.first;
		if(kc > d[i][j]) continue;
		for(int k=0;k<4;k++){
			int i1 = i + dx[k];
			int j1 = j + dy[k];
			if(i1>=1 && i1<=n && j1>=1 && j1<=m){
			    if(d[i1][j1] > d[i][j] + a[i1][j1]){
				    d[i1][j1] = d[i][j] + a[i1][j1];
				    pq.push({d[i1][j1],{i1,j1}});
			    }
			}
		}
	}
	cout << d[n][m] << endl;
}
int main(){
	int t; cin >> t;
	while(t--){
		nhap();
		Dijkstra();
	}
}
